syntax = "proto3";

option go_package = "github.com/n0stack/proto/device/vm";

package n0stack.device.vm;

import "model.proto";
import "notification.proto";
import "resource/network/model.proto";
import "resource/hwaddr/model.proto";
import "resource/ipv4addr/model.proto";

message NIC {
  n0stack.resource.network.Spec network = 1;
  n0stack.resource.hwaddr.Spec hwaddr = 2;
  repeated n0stack.resource.ipv4addr.Spec ipv4addr = 3;
  string bridge = 4;
  string tap = 5;
}

enum RunLevel {
  STOPED = 0;
  RUNNING = 1;
  SAVED = 2;
}

message Status {
  RunLevel runLevel = 1;
  // map<string, n0stack.device.volume.Spec> volume = 1;
  // repeated n0stack.device.volume.Spec volume = 1;
  repeated NIC nic = 2; 
}

message FileOnKVM {
  n0stack.Model vm = 1;
  n0stack.Model volume = 2;
  string path = 3;
}

message TapOnKVM {
  n0stack.Model vm = 1;
  // n0stack.Model network = 2;
  string bridge = 2;
  repeated n0stack.resource.ipv4addr.Spec ipv4addr = 3;
}

service KVM {
  rpc GetStatus(n0stack.Model)    returns (Status) {}
  rpc Boot(n0stack.Model)         returns (stream n0stack.Notification) {}
  rpc Reboot(n0stack.Model)       returns (stream n0stack.Notification) {}
  rpc HardReboot(n0stack.Model)   returns (stream n0stack.Notification) {}
  rpc Shutdown(n0stack.Model)     returns (stream n0stack.Notification) {}
  rpc HardShutdown(n0stack.Model) returns (stream n0stack.Notification) {}
  rpc Save(n0stack.Model)         returns (stream n0stack.Notification) {}
  rpc AttachTap(TapOnKVM)         returns (stream n0stack.Notification) {}
  rpc AttachFile(FileOnKVM)       returns (stream n0stack.Notification) {}
}
