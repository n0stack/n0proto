syntax = "proto3";

option go_package = "github.com/n0stack/proto/device/vm";

package n0stack.device.vm;

import "model.proto";
import "notification.proto";
import "device/model.proto";
import "device/volume/model.proto";
import "device/nic/model.proto";
import "resource/cpu/model.proto";
import "resource/memory/model.proto";

enum RunLevel {
  SHUTDOWN = 0;
  RUNNING = 1;
  PAUSED = 2;
}

service Standard {
  // rpc Create(Spec)           returns (Spec, n0stack.Notification) {}
  rpc Apply(Spec)            returns (n0stack.Notification) {}
  rpc Delete(n0stack.Model)  returns (n0stack.Notification) {}

  // read history
  // rpc Read(n0stack.Model) returns (Spec) {}
}

message Spec {
  n0stack.device.Spec device = 1;
  n0stack.resource.cpu.Spec cpu = 2;
  n0stack.resource.memory.Spec memory = 3;
  repeated n0stack.device.volume.Spec volume = 4;

  // message NIC {
  //   repeated n0stack.device.bridge.Spec bridge = 5;
  //   n0stack.resource.hwaddr.Spec hwAddr = 2;
  // }
  // repeated NIC nic = 5;
}  

message Status {
  RunLevel runLevel = 1;
}

// service Agent {
//   // get data from models which is already exists
//   // 実態からデータを生成する
//   rpc GetSpec(n0stack.Model)          returns (Spec) {}
//   rpc GetStatus(n0stack.Model)        returns (Status) {}
//   // rpc GetNotifications(n0stack.Model) returns (stream n0stack.Notification) {}
  
//   // change state
//   rpc Boot(n0stack.Model)         returns (n0stack.Notification) {}
//   rpc Reboot(n0stack.Model)       returns (n0stack.Notification) {}
//   rpc HardReboot(n0stack.Model)   returns (n0stack.Notification) {}
//   rpc Shutdown(n0stack.Model)     returns (n0stack.Notification) {}
//   rpc HardShutdown(n0stack.Model) returns (n0stack.Notification) {}
//   rpc Save(n0stack.Model)         returns (n0stack.Notification) {}
// }
