syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/pool/v0;ppool";

package n0stack.pool;

import "google/protobuf/empty.proto";
import "v0/metadata.proto";
import "budget/v0/compute.proto";
import "budget/v0/storage.proto";

message Node {
  n0stack.Metadata metadata = 1;
  NodeSpec spec = 2;
  NodeStatus status = 3;
}

message NodeSpec {
  string serial = 1;

  string address = 2;
  string ipmi_address = 3;

  uint32 cpu_milli_cores = 4;
  uint64 storage_bytes = 5;
}

message NodeStatus {
  enum NodeState {
    NotReady = 0;
    Ready = 1;
  }
  NodeState state = 1;

  map<string, n0stack.budget.Compute> reserved_computes = 2;
  map<string, n0stack.budget.Storage> reserved_storages = 3;
}

service NodeService {
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {}

  rpc GetNode(GetNodeRequest) returns (Node) {}

  rpc ApplyNode(ApplyNodeRequest) returns (Node) {}

  rpc DeleteNode(DeleteNodeRequest) returns (google.protobuf.Empty) {}

  rpc ScheduleCompute(ScheduleComputeRequest) returns (ReserveComputeResponse) {}
  rpc ReserveCompute(ReserveComputeRequest) returns (ReserveComputeResponse) {}
  // rpc ResizeCompute(ResizeComputeRequest) returns (ReserveComputeResponse) {}
  rpc ReleaseCompute(ReleaseComputeRequest) returns (google.protobuf.Empty) {}

  rpc ScheduleStorage(ScheduleStorageRequest) returns (ReserveStorageResponse) {}
  rpc ReserveStorage(ReserveStorageRequest) returns (ReserveStorageResponse) {}
  // rpc ResizeStorae() returns () {}
  rpc ReleaseStorage(ReleaseStorageRequest) returns (google.protobuf.Empty) {}
}

message ListNodesRequest {}
message ListNodesResponse {
  repeated Node nodes = 1;
}

message GetNodeRequest {
  string name = 1;
}

message ApplyNodeRequest {
  n0stack.Metadata metadata = 1;
  NodeSpec spec = 2;
}

message DeleteNodeRequest {
  string name = 1;
}

message ScheduleComputeRequest {
  string compute_name = 2;
  
  n0stack.budget.Compute compute = 3;
}

message ReserveComputeRequest {
  string name = 1;
  string compute_name = 2;
  
  n0stack.budget.Compute compute = 3;
}

message ReserveComputeResponse {
  string name = 1;
  string compute_name = 2;

  n0stack.budget.Compute compute = 3;
}

message ReleaseComputeRequest {
  string name = 1;
  string compute_name = 2;
}

message ScheduleStorageRequest {
  string name = 1;
  string storage_name = 2;

  n0stack.budget.Storage storage = 3;
}

message ReserveStorageRequest {
  string name = 1;
  string storage_name = 2;

  n0stack.budget.Storage storage = 3;
}

message ReserveStorageResponse {
  string name = 1;
  string storage_name = 2;

  n0stack.budget.Storage storage = 3;
}

message ReleaseStorageRequest {
  string name = 1;
  string storage_name = 2;
}
