syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/pool/v0;ppool";

package n0stack.pool;

import "google/protobuf/empty.proto";
import "budget/v0/compute.proto";
import "budget/v0/storage.proto";


message Node {
  string name = 1;
  map<string, string> annotations = 3;
  uint64 version = 5;

  string address = 10;
  string ipmi_address = 11;

  string serial = 12;

  // budget pool
  uint32 cpu_milli_cores = 13;
  uint64 memory_bytes = 14;
  uint64 storage_bytes = 15;

  // physical placement
  string datacenter = 16;
  string availavility_zone = 17;
  string cell = 18;
  string rack = 19;
  uint32 unit = 20;

  enum NodeState {
    NotReady = 0;
    Ready = 1;
  }
  NodeState state = 50;

  map<string, n0stack.budget.Compute> reserved_computes = 51;
  map<string, n0stack.budget.Storage> reserved_storages = 52;
}


service NodeService {
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {}
  rpc GetNode(GetNodeRequest) returns (Node) {}
  rpc ApplyNode(ApplyNodeRequest) returns (Node) {}
  rpc DeleteNode(DeleteNodeRequest) returns (google.protobuf.Empty) {}

  rpc ScheduleCompute(ScheduleComputeRequest) returns (Node) {}
  rpc ReserveCompute(ReserveComputeRequest) returns (Node) {}
  // rpc ResizeCompute(ResizeComputeRequest) returns (ReserveComputeResponse) {}
  rpc ReleaseCompute(ReleaseComputeRequest) returns (google.protobuf.Empty) {}

  rpc ScheduleStorage(ScheduleStorageRequest) returns (Node) {}
  rpc ReserveStorage(ReserveStorageRequest) returns (Node) {}
  // rpc ResizeStorae() returns () {}
  rpc ReleaseStorage(ReleaseStorageRequest) returns (google.protobuf.Empty) {}
}


message ListNodesRequest {}
message ListNodesResponse {
  repeated Node nodes = 1;
}

message GetNodeRequest {
  string name = 1;
}

message ApplyNodeRequest {
  string name = 1;

  map<string, string> annotations = 3;

  uint64 version = 5;

  string address = 10;
  string ipmi_address = 11;

  string serial = 12;

  uint32 cpu_milli_cores = 13;
  uint64 memory_bytes = 14;
  uint64 storage_bytes = 15;

  string datacenter = 16;
  string availavility_zone = 17;
  string cell = 18;
  string rack = 19;
  uint32 unit = 20;
}

message DeleteNodeRequest {
  string name = 1;
}

message ScheduleComputeRequest {
  string compute_name = 2;

  map<string, string> annotations = 3;

  uint32 request_cpu_milli_core = 4;
  uint32 limit_cpu_milli_core = 5;

  uint64 request_memory_bytes = 6;
  uint64 limit_memory_bytes = 7;
}

message ReserveComputeRequest {
  string node_name = 1;
  string compute_name = 2;

  map<string, string> annotations = 3;

  uint32 request_cpu_milli_core = 4;
  uint32 limit_cpu_milli_core = 5;

  uint64 request_memory_bytes = 6;
  uint64 limit_memory_bytes = 7;
}

message ReleaseComputeRequest {
  string node_name = 1;
  string compute_name = 2;
}

message ScheduleStorageRequest {
  string storage_name = 2;

  map<string, string> annotations = 3;

  uint64 request_bytes = 4;
  uint64 limit_bytes = 5;
}

message ReserveStorageRequest {
  string node_name = 1;
  string storage_name = 2;

  map<string, string> annotations = 3;

  uint64 request_bytes = 4;
  uint64 limit_bytes = 5;
}

message ReleaseStorageRequest {
  string node_name = 1;
  string storage_name = 2;
}
