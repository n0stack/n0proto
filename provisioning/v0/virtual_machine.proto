syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning;

import "google/protobuf/empty.proto";
import "v0/metadata.proto";

message VirtualMachine {
  n0stack.Metadata metadata = 1;
  VirtualMachineSpec spec = 2;
  VirtualMachineStatus status = 3;
}

message VirtualMachineSpec {
  uint32 request_cpu_milli_core = 1;
  uint32 limit_cpu_milli_core = 2;

  uint64 request_memory_bytes = 3;
  uint64 limit_memory_bytes = 4;

  repeated string block_storage_names = 5;

  message NIC {
    string network_name = 1;

    string hardware_address = 2;

    string ipv4_address = 3;
    string ipv6_address = 4;
  }
  repeated NIC nics = 6;
}

message VirtualMachineStatus {
  enum VirtualMachineState {
    // falied state because failed some process on API.
    FAILED = 0;
  
    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 1;
  
    // running vm
    RUNNING = 2;
    SHUTDOWN = 3;
    PAUSED = 4;
  }
  VirtualMachineState state = 1;

  string uuid = 2;

  string compute_node_name = 3;
  string compute_name = 4;

  repeated string network_interface_names = 5;
}

service VirtualMachineService {
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (VirtualMachine) {}

  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse) {}

  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (VirtualMachine) {}

  rpc UpdateVirtualMachine(UpdateVirtualMachineRequest) returns (VirtualMachine) {}

  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (google.protobuf.Empty) {}

  // VM actions
  // -> RUNNING
  rpc BootVirtualMachine(BootVirtualMachineRequest) returns (VirtualMachine) {}
  // RUNNING -> RUNNING
  rpc RebootVirtualMachine(RebootVirtualMachineRequest) returns (VirtualMachine) {}
  // RUNNING -> SHUTDOWN
  rpc ShutdownVirtualMachine(ShutdownVirtualMachineRequest) returns (VirtualMachine) {}
  // RUNNING -> PAUSED
  rpc SaveVirtualMachine(SaveVirtualMachineRequest) returns (VirtualMachine) {}

  // rpc MigrateVirtualMachine(MigrateVirtualMachineRequest) returns (VirtualMachine) {}
}

message CreateVirtualMachineRequest {
  n0stack.Metadata metadata = 1;
  VirtualMachineSpec spec = 2;
}

message ListVirtualMachinesRequest {}
message ListVirtualMachinesResponse {
  repeated VirtualMachine VirtualMachines = 1;
}  

message GetVirtualMachineRequest {
  string name = 1;
}  

message UpdateVirtualMachineRequest {
  n0stack.Metadata metadata = 1;
  VirtualMachineSpec spec = 2;
}  

message DeleteVirtualMachineRequest {
  string name = 1;
}

message BootVirtualMachineRequest {
  string name = 1;
}

message RebootVirtualMachineRequest {
  string name = 1;
  bool hard = 2;
}

message ShutdownVirtualMachineRequest {
  string name = 1;
  bool hard = 2;
}

message SaveVirtualMachineRequest {
  string name = 1;
}
