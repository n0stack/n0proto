syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning;

import "google/protobuf/empty.proto";

import "v0/component.proto";
import "v0/metadata.proto";

service NetworkService {
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse) {}

  rpc GetNetwork(GetNetworkRequest) returns (Network) {}

  rpc ApplyNetwork(ApplyNetworkRequest) returns (Network) {}

  rpc DeleteNetwork(DeleteNetworkRequest) returns (google.protobuf.Empty) {}

  rpc WatchNetworks(WatchNetworksRequest) returns (stream WatchNetworksResponse) {}
}

message Network {
  n0stack.Metadata metadata = 1;
  NetworkSpec spec = 2;
  NetworkStatus status = 3;
  repeated n0stack.Component components = 4;  
}

message NetworkSpec {
  string ipv4_cidr = 1;
  string ipv4_gateway = 2;

  string ipv6_cidr = 3;
  string ipv6_gateway = 4;

  string name_server = 5;
  string domain = 6;
}

message NetworkStatus {
  enum NetworkState {
    // not scheduled
    PENDING = 0;

    AVAILABLE = 3;

    // falied state because failed some process on API.
    FAILED = 1;

    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 2;
  }
  NetworkState state = 1;
}

message ListNetworksRequest {}

message ListNetworksResponse{
  repeated Network networks = 1;
}

message GetNetworkRequest {
  string name = 1;
}

message ApplyNetworkRequest {
  n0stack.Metadata metadata = 1;
  NetworkSpec spec = 2;
}

message DeleteNetworkRequest {
  string name = 1;
}

message WatchNetworksRequest {}

message WatchNetworksResponse {
  enum NetworkEvents {
    APPLY = 0;
    DELETE = 1;
  }
  NetworkEvents event = 1;
  Network network = 2;
}
