syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning;

import "google/protobuf/empty.proto";
import "v0/metadata.proto";

message Volume {
  n0stack.Metadata metadata = 1;
  VolumeSpec spec = 2;
  VolumeStatus status = 3;
}

message VolumeSpec {
  uint64 request_bytes = 1;
  uint64 limit_bytes = 2;
}

message VolumeStatus {
  enum VolumeState {
    // falied state because failed some process on API.
    FAILED = 0;
  
    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 1;
  
    AVAILABLE = 2;
    IN_USE = 3;
  }
  VolumeState state = 1;

  string node_name = 2;
  string storage_name = 3;
}

service VolumeService {
  rpc CreateEmptyVolume(CreateEmptyVolumeRequest) returns (Volume) {}
  rpc CreateVolumeWithDownloading(CreateVolumeWithDownloadingRequest) returns (Volume) {}

  rpc ListVolumes(ListVolumesRequest) returns (ListVolumesResponse) {}

  rpc GetVolume(GetVolumeRequest) returns (Volume) {}

  rpc UpdateVolume(UpdateVolumeRequest) returns (Volume) {}

  rpc DeleteVolume(DeleteVolumeRequest) returns (google.protobuf.Empty) {}

  rpc SetInuseVolume(google.protobuf.Empty) returns (Volume) {}
  rpc SetAvailableVolume(google.protobuf.Empty) returns (Volume) {}

  // // when AVAILABLE, not IN_USE
  // rpc MigrateVolume(MigrateVolumeRequest) returns (Volume) {}
}

message CreateEmptyVolumeRequest {
  n0stack.Metadata metadata = 1;
  VolumeSpec spec = 2;
}
message CreateVolumeWithDownloadingRequest {
  n0stack.Metadata metadata = 1;
  VolumeSpec spec = 2;

  string source_url = 3;
}

message ListVolumesRequest {}
message ListVolumesResponse {
  repeated Volume volumes = 1;
}

message GetVolumeRequest {
  string name = 1;
}

message UpdateVolumeRequest {
  n0stack.Metadata metadata = 1;
  VolumeSpec spec = 2;
}

message DeleteVolumeRequest {
  string name = 1;
}

// message MigrateVolumeRequest {
//   string name = 1;
//   string node_name = 2;
// }
