syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning;

import "google/protobuf/empty.proto";

import "v0/metadata.proto";

service VolumeService {
  rpc ListVolumes(ListVolumesRequest) returns (ListVolumesResponse) {}

  rpc GetVolume(GetVolumeRequest) returns (Volume) {}

  rpc ApplyVolume(ApplyVolumeRequest) returns (Volume) {}

  rpc DeleteVolume(DeleteVolumeRequest) returns (google.protobuf.Empty) {}

  rpc WatchVolumes(WatchVolumesRequest) returns (stream WatchVolumesResponse) {}
}

message Volume {
  n0stack.Metadata metadata = 1;
  VolumeSpec spec = 2;
  VolumeStatus status = 3;
}

message VolumeSpec {
  uint64 bytes = 1;
}

message VolumeStatus {
  enum VolumeState {
    // not scheduled
    PENDING = 0;

    AVAILABLE = 1;

    // unknown state because failed to connect for scheduled node after RUNNING.
    FAILED = 2;

    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 3;
  }
  VolumeState state = 1;
}

message ListVolumesRequest {}

message ListVolumesResponse {
  repeated Volume volumes = 1;
}

message GetVolumeRequest {
  string name = 1;
}

// message CreateVolumeRequest {
//   n0stack.metadata.Metadata metadata = 1;
//   Spec spec = 2;

//   string image_id = 4;
// }

message ApplyVolumeRequest {
  n0stack.Metadata metadata = 1;
  VolumeSpec spec = 2;
}

message DeleteVolumeRequest {
  string name = 1;
}

message WatchVolumesRequest {}

message WatchVolumesResponse {
  enum VolumeEvents {
    APPLY = 0;
    DELETE = 1;
  }
  VolumeEvents event = 1;
  Volume volume = 2;
}
