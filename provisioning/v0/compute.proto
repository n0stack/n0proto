syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning;

import "google/protobuf/empty.proto";

import "v0/component.proto";
import "v0/metadata.proto";

service ComputeService {
  rpc ListComputes(ListComputesRequest) returns (ListComputesResponse) {}

  rpc GetCompute(GetComputeRequest) returns (Compute) {}

  rpc ApplyCompute(ApplyComputeRequest) returns (Compute) {}

  rpc DeleteCompute(DeleteComputeRequest) returns (google.protobuf.Empty) {}

  rpc WatchCompute(WatchComputesRequest) returns (stream WatchComputesResponse) {}

  // VM actions
  // -> RUNNING
  rpc Boot(ActionComputeRequest)         returns (Compute) {}

  // RUNNING -> RUNNING
  rpc Reboot(ActionComputeRequest)       returns (Compute) {}

  // RUNNING -> RUNNING
  rpc HardReboot(ActionComputeRequest)   returns (Compute) {}

  // RUNNING -> SHUTDOWN
  rpc Shutdown(ActionComputeRequest)     returns (Compute) {}

  // RUNNING -> SHUTDOWN
  rpc HardShutdown(ActionComputeRequest) returns (Compute) {}

  // RUNNING -> PAUSED
  rpc Save(ActionComputeRequest)         returns (Compute) {}
}

message Compute {
  n0stack.Metadata metadata = 1;
  ComputeSpec spec = 2;
  ComputeStatus status = 3;
  repeated n0stack.Component components = 4;
}

message ComputeSpec {
  // CPU
  uint32 vcpus = 1;

  // Memory
  // request_memory_bytes
  // limit_memory_bytes
  uint64 memory_bytes = 2;

  // Volume
  // definition: (label, volume_name)
  message Volume {
    string volume_name = 1;
  }
  map<string, Volume> volumes = 3;

  // Network
  // definition: (label, NIC)
  message NIC {
    string network_name = 1;

    string hardware_address = 2;

    repeated string ip_addresses = 3;
  }
  map<string, NIC> nics = 4;
}

message ComputeStatus {
  enum ComputeState {
    // not scheduled
    PENDING = 0;

    // running vm
    RUNNING = 3;
    SHUTDOWN = 4;
    PAUSED = 5;

    // falied state because failed some process on API.
    FAILED = 1;

    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 2;
  }
  ComputeState state = 1;

  // allocated_memory_bytes  
}

message ListComputesRequest {}

message ListComputesResponse {
  repeated Compute computes = 1;
}

message GetComputeRequest {
  string name = 1;
}

message ApplyComputeRequest {
  n0stack.Metadata metadata = 1;
  ComputeSpec spec = 2;
}

message DeleteComputeRequest {
  string name = 1;
}

message WatchComputesRequest {}

message WatchComputesResponse{}

message ActionComputeRequest {
  string name = 1;
}
