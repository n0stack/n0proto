syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning;

import "google/protobuf/empty.proto";

import "v0/metadata.proto";

service ComputeService {
  rpc ListComputes(ListComputesRequest) returns (ListComputesResponse) {}

  rpc GetCompute(GetComputeRequest) returns (Compute) {}

  rpc ApplyCompute(ApplyComputeRequest) returns (Compute) {}

  rpc DeleteCompute(DeleteComputeRequest) returns (google.protobuf.Empty) {}

  rpc WatchCompute(WatchComputesRequest) returns (stream WatchComputesResponse) {}
}

message Compute {
  n0stack.Metadata metadata = 1;
  ComputeSpec spec = 2;
  ComputeStatus status = 3;
}

message ComputeSpec {
  // CPU
  uint32 vcpus = 1;

  // Memory
  uint64 memory_bytes = 2;

  // Volume
  repeated string volume_ids = 3;

  // Network
  // エンドポイントを分けたほうがいいと思うが、実装する内容もないし、ユーザーのリクエストが煩雑になるので保留
  // ただし、DHCPなどのためやNICの順番が入れ替わったりするときのためにmetadataやidはあったほうが便利だと考えている
  message NIC {
    n0stack.Metadata metadata = 1;

    message Spec {
      string network_id = 1;

      // 重複するかは確認しない
      // かわりに空を許可して、DHCPで自動割り当てを可能にする
      // TODO: 割り当てられたIPをどうやって確認するか
      repeated string ipaddrs = 2;
    }
    Spec spec = 2;
  }
  repeated NIC nics = 4;
}

message ComputeStatus {
  enum ComputeState {
    // not scheduled
    PENDING = 0;

    // running vm
    RUNNING = 1;

    // unknown state because failed to connect for scheduled node after RUNNING.
    FAILED = 2;

    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 3;
  }
  ComputeState state = 1;
}

message ListComputesRequest {}

message ListComputesResponse {
  repeated Compute computes = 1;
}

message GetComputeRequest {
  string name = 1;
}

message ApplyComputeRequest {
  n0stack.Metadata metadata = 1;
  ComputeSpec spec = 2;
}

message DeleteComputeRequest {
  string name = 1;
}

message WatchComputesRequest {}

message WatchComputesResponse{
  enum ComputeEvents {
    APPLY = 0;
    DELETE = 1;
  }
  ComputeEvents event = 1;
  Compute compute = 2;
}
