syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/compute/v0;pcompute";

package n0stack.compute;

import "google/protobuf/empty.proto";

import "metadata/v0/model.proto";

service ComputeService {
  rpc ListComputes(ListComputesRequest)   returns (ListComputesResponse) {}

  rpc GetCompute(GetComputeRequest)   returns (Compute) {}

  rpc ApplyCompute(ApplyComputeRequest) returns (Compute) {}

  rpc DeleteCompute(DeleteComputeRequest) returns (google.protobuf.Empty) {}
}

message Compute {
  string id = 1;
  n0stack.metadata.Metadata metadata = 2;
  Spec spec = 3;
  Status status = 4;
}

message Spec {
  // CPU
  uint32 vcpus = 1;

  // Memory
  uint64 memory_bytes = 2;

  // Volume
  repeated string volume_ids = 3;

  // Network
  // エンドポイントを分けたほうがいいと思うが、実装する内容もないし、ユーザーのリクエストが煩雑になるので保留
  // ただし、DHCPなどのためやNICの順番が入れ替わったりするときのためにmetadataやidはあったほうが便利だと考える
  message NIC {
    string id = 1;
    n0stack.metadata.Metadata metadata = 2;

    message Spec {
      string network_id = 1;

      // 重複するかは確認しない
      // かわりに空を許可して、DHCPで自動割り当てを可能にする
      // TODO: 割り当てられたIPをどうやって確認するか
      repeated string ipaddrs = 2;
    }
    Spec spec = 3;
  }
  repeated NIC nics = 4;
}

message Status {
  enum State {
    // not scheduled
    PENDING = 0;

    // running vm
    RUNNING = 1;

    // unknown state because failed to connect for scheduled node after RUNNING.
    FAILED = 2;

    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 3;
  }
  State state = 1;
}

message ListComputesRequest {}

message ListComputesResponse {
  repeated Compute computes = 1;
}

message GetComputeRequest {
  string id = 1;
}

message ApplyComputeRequest {
  string id = 1;
  n0stack.metadata.Metadata metadata = 2;
  Spec spec = 3;
}

message DeleteComputeRequest {
  string id = 1;
}
