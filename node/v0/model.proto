syntax = "proto3";

option go_package = "github.com/n0stack/proto.go/node/v0;pnode";

package n0stack.node;

service NodeService {
  // clusterレベルのList
  // すべてのノードから同じ結果が帰ってくる必要がある
  rpc List(ListRequest) returns (ListResponse) {}

  // 自分のNodeオブジェクトを返す
  // IDを指定できるようにしたほうが統一感があるかもしれない
  rpc Get(GetRequest) returns (Node) {}

  // nodeが死んだことを動的に検知するためのエンドポイント (仮)
  // rpc AliveActivity(AliveActivityRequest) returns (stream AliveActivityResponse) {}
}

message Node {
  // MotherBoardのUUIDを用いる
  string id = 1;

  Status status = 4;
}

message Status {
  // Architectureは全部x64だろうという気持ち
  uint32 vcpus = 1;

  // Memory
  uint64 memory_bytes = 2;

  // Storage
  uint64 storage_bytes = 3;

  // Network
}

message ListRequest {
  // paging
  // int32 page_size = 1;
  // string page_token = 2;
}

message ListResponse {
  repeated Node nodes = 1;
}

message GetRequest {
}
